// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`code generator generates code 1`] = `
"/* eslint-disable */
import { ethers } from 'ethers';
import { contract, Call, Send, AddressLike, Contract } from '@crestproject/ethers';
import ERC20Artifact from './contracts/ERC20.json';

export type ERC20Args = [name: string, symbol: string];

// prettier-ignore
export interface ERC20 extends Contract<ERC20> {
  // Shortcuts (using function name of first overload)
  allowance: Call<(owner: AddressLike, spender: AddressLike) => ethers.BigNumber, ERC20>
  approve: Send<(spender: AddressLike, amount: ethers.BigNumberish) => boolean, ERC20>
  balanceOf: Call<(account: AddressLike) => ethers.BigNumber, ERC20>
  decimals: Call<() => ethers.BigNumber, ERC20>
  decreaseAllowance: Send<(spender: AddressLike, subtractedValue: ethers.BigNumberish) => boolean, ERC20>
  increaseAllowance: Send<(spender: AddressLike, addedValue: ethers.BigNumberish) => boolean, ERC20>
  name: Call<() => string, ERC20>
  symbol: Call<() => string, ERC20>
  totalSupply: Call<() => ethers.BigNumber, ERC20>
  transfer: Send<(recipient: AddressLike, amount: ethers.BigNumberish) => boolean, ERC20>
  transferFrom: Send<(sender: AddressLike, recipient: AddressLike, amount: ethers.BigNumberish) => boolean, ERC20>

  // Explicit accessors (using full function signature)
  'allowance(address,address)': Call<(owner: AddressLike, spender: AddressLike) => ethers.BigNumber, ERC20>
  'approve(address,uint256)': Send<(spender: AddressLike, amount: ethers.BigNumberish) => boolean, ERC20>
  'balanceOf(address)': Call<(account: AddressLike) => ethers.BigNumber, ERC20>
  'decimals()': Call<() => ethers.BigNumber, ERC20>
  'decreaseAllowance(address,uint256)': Send<(spender: AddressLike, subtractedValue: ethers.BigNumberish) => boolean, ERC20>
  'increaseAllowance(address,uint256)': Send<(spender: AddressLike, addedValue: ethers.BigNumberish) => boolean, ERC20>
  'name()': Call<() => string, ERC20>
  'symbol()': Call<() => string, ERC20>
  'totalSupply()': Call<() => ethers.BigNumber, ERC20>
  'transfer(address,uint256)': Send<(recipient: AddressLike, amount: ethers.BigNumberish) => boolean, ERC20>
  'transferFrom(address,address,uint256)': Send<(sender: AddressLike, recipient: AddressLike, amount: ethers.BigNumberish) => boolean, ERC20>
}

export const ERC20 = contract.fromSolidity<ERC20, ERC20Args>(ERC20Artifact);"
`;
