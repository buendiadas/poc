import { ethers } from 'ethers';
import { Send, Functions, SpecializedContract } from './types';

export type DoppelgangerContract = SpecializedContract<DoppelgangerFunctions>;

export type DoppelgangerConstructor = () => void;

export interface DoppelgangerFunctions extends Functions {
  __doppelganger__mockReturns: Send<
    (data: ethers.utils.BytesLike, value: ethers.utils.BytesLike) => void
  >;
  '__doppelganger__mockReturns(bytes,bytes)': Send<
    (data: ethers.utils.BytesLike, value: ethers.utils.BytesLike) => void
  >;
  __doppelganger__mockReverts: Send<(data: ethers.utils.BytesLike) => void>;
  '__doppelganger__mockReverts(bytes)': Send<
    (data: ethers.utils.BytesLike) => void
  >;
}

export const DoppelgangerCompilerOutput = {
  abi: [
    {
      stateMutability: 'payable',
      type: 'fallback',
    },
    {
      inputs: [
        {
          internalType: 'bytes',
          name: 'data',
          type: 'bytes',
        },
        {
          internalType: 'bytes',
          name: 'value',
          type: 'bytes',
        },
      ],
      name: '__doppelganger__mockReturns',
      outputs: [],
      stateMutability: 'nonpayable',
      type: 'function',
    },
    {
      inputs: [
        {
          internalType: 'bytes',
          name: 'data',
          type: 'bytes',
        },
      ],
      name: '__doppelganger__mockReverts',
      outputs: [],
      stateMutability: 'nonpayable',
      type: 'function',
    },
  ],
  bytecode:
    '608060405234801561001057600080fd5b50610765806100206000396000f3fe60806040526004361061002d5760003560e01c80630ad4c2421461010f57806377ba60ad1461026e5761002e565b5b6000610038610336565b9050600115158160000160019054906101000a900460ff1615151415610066576100606104a5565b5061010d565b61010b816001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156101015780601f106100d657610100808354040283529160200191610101565b820191906000526020600020905b8154815290600101906020018083116100e457829003601f168201915b5050505050610513565b505b005b34801561011b57600080fd5b5061026c6004803603604081101561013257600080fd5b810190808035906020019064010000000081111561014f57600080fd5b82018360208201111561016157600080fd5b8035906020019184600183028401116401000000008311171561018357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156101e657600080fd5b8201836020820111156101f857600080fd5b8035906020019184600183028401116401000000008311171561021a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061051b565b005b34801561027a57600080fd5b506103346004803603602081101561029157600080fd5b81019080803590602001906401000000008111156102ae57600080fd5b8201836020820111156102c057600080fd5b803590602001918460018302840111640100000000831117156102e257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506105b9565b005b60008060008036604051808383808284378083019250505092505050604051809103902081526020019081526020016000209050600115158160000160009054906101000a900460ff1615151415610390578090506104a2565b60008080357fffffffff000000000000000000000000000000000000000000000000000000001660405160200180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526004019150506040516020818303038152906040528051906020012081526020019081526020016000209050600115158160000160009054906101000a900460ff1615151415610451578090506104a2565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061070b6025913960400191505060405180910390fd5b90565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4d6f636b2072657665727400000000000000000000000000000000000000000081525060200191505060405180910390fd5b805160208201f35b6040518060600160405280600115158152602001600015158152602001828152506000808480519060200120815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160010190805190602001906105b1929190610665565b509050505050565b6040518060600160405280600115158152602001600115158152602001604051806020016040528060008152508152506000808380519060200120815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff021916908315150217905550604082015181600101908051906020019061065e929190610665565b5090505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106106a657805160ff19168380011785556106d4565b828001600101855582156106d4579182015b828111156106d35782518255916020019190600101906106b8565b5b5090506106e191906106e5565b5090565b61070791905b808211156107035760008160009055506001016106eb565b5090565b9056fe4d6f636b206f6e20746865206d6574686f64206973206e6f7420696e697469616c697a6564a2646970667358221220266e79a5d5de9f7544bbb863cce713c27f94e077d8fe519e126b99a1685d037d64736f6c634300060b0033',
};
