import { ethers } from 'ethers';
import { Contract, deploy } from './contract';
import { Send } from './types';

export const DoppelgangerCompilerOutput = {
  abi: [
    {
      stateMutability: 'payable',
      type: 'fallback',
    },
    {
      inputs: [
        {
          internalType: 'bytes',
          name: 'data',
          type: 'bytes',
        },
        {
          internalType: 'bytes',
          name: 'value',
          type: 'bytes',
        },
      ],
      name: '__doppelganger__mockReturns',
      outputs: [],
      stateMutability: 'nonpayable',
      type: 'function',
    },
    {
      inputs: [
        {
          internalType: 'bytes',
          name: 'data',
          type: 'bytes',
        },
        {
          internalType: 'string',
          name: 'reason',
          type: 'string',
        },
      ],
      name: '__doppelganger__mockReverts',
      outputs: [],
      stateMutability: 'nonpayable',
      type: 'function',
    },
  ],
  bytecode:
    '608060405234801561001057600080fd5b50610d02806100206000396000f3fe60806040526004361061002d5760003560e01c80630ad4c2421461023f5780638863f50a1461039e5761002e565b5b60006100386104fd565b9050600115158160000160019054906101000a900460ff1615151415610197578060010160405160200180807f4d6f636b207265766572743a2000000000000000000000000000000000000000815250600d01828054600181600116156101000203166002900480156100e25780601f106100c05761010080835404028352918201916100e2565b820191906000526020600020905b8154815290600101906020018083116100ce575b50509150506040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561015c578082015181840152602081019050610141565b50505050905090810190601f1680156101895780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b61023c816002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102325780601f1061020757610100808354040283529160200191610232565b820191906000526020600020905b81548152906001019060200180831161021557829003601f168201915b5050505050610739565b50005b34801561024b57600080fd5b5061039c6004803603604081101561026257600080fd5b810190808035906020019064010000000081111561027f57600080fd5b82018360208201111561029157600080fd5b803590602001918460018302840111640100000000831117156102b357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561031657600080fd5b82018360208201111561032857600080fd5b8035906020019184600183028401116401000000008311171561034a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610741565b005b3480156103aa57600080fd5b506104fb600480360360408110156103c157600080fd5b81019080803590602001906401000000008111156103de57600080fd5b8201836020820111156103f057600080fd5b8035906020019184600183028401116401000000008311171561041257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561047557600080fd5b82018360208201111561048757600080fd5b803590602001918460018302840111640100000000831117156104a957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610811565b005b60008060008036604051808383808284378083019250505092505050604051809103902081526020019081526020016000209050600115158160000160009054906101000a900460ff161515141561055457610736565b60008080357fffffffff000000000000000000000000000000000000000000000000000000001660405160200180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526004019150506040516020818303038152906040528051906020012081526020019081526020016000209050600115158160000160009054906101000a900460ff16151514156105f357610736565b6106206000357fffffffff00000000000000000000000000000000000000000000000000000000166108e1565b6040516020018080610ca66027913960270182805190602001908083835b60208310610661578051825260208201915060208101905060208303925061063e565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156106fb5780820151818401526020810190506106e0565b50505050905090810190601f1680156107285780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b90565b805160208201f35b6040518060800160405280600115158152602001600015158152602001604051806020016040528060008152508152602001828152506000808480519060200120815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160010190805190602001906107ec929190610b88565b506060820151816002019080519060200190610809929190610c08565b509050505050565b6040518060800160405280600115158152602001600115158152602001828152602001604051806020016040528060008152508152506000808480519060200120815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160010190805190602001906108bc929190610b88565b5060608201518160020190805190602001906108d9929190610c08565b509050505050565b606080600a67ffffffffffffffff811180156108fc57600080fd5b506040519080825280601f01601f19166020018201604052801561092f5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061096057fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106109bd57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b6004811015610ad557610a206010858360048110610a0957fe5b1a60f81b60f81c60ff1681610a1a57fe5b04610adf565b826002836002020181518110610a3257fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610a896010858360048110610a7257fe5b1a60f81b60f81c60ff1681610a8357fe5b06610adf565b826003836002020181518110610a9b57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508060010190506109ef565b5080915050919050565b60008160ff16600011158015610af9575060098260ff1611155b15610b2e57817f300000000000000000000000000000000000000000000000000000000000000060f81c0160f81b9050610b83565b8160ff16600a11158015610b465750600f8260ff1611155b15610b7e57600a827f610000000000000000000000000000000000000000000000000000000000000060f81c010360f81b9050610b83565b600080fd5b919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610bc957805160ff1916838001178555610bf7565b82800160010185558215610bf7579182015b82811115610bf6578251825591602001919060010190610bdb565b5b509050610c049190610c88565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610c4957805160ff1916838001178555610c77565b82800160010185558215610c77579182015b82811115610c76578251825591602001919060010190610c5b565b5b509050610c849190610c88565b5090565b5b80821115610ca1576000816000905550600101610c89565b509056fe4d6f636b206f6e20746865206d6574686f64206973206e6f7420696e697469616c697a65643a20a264697066735822122019e586364584e1ccce8d87d07ac21d9a2b9f810d4710dd214a14666f6edfd44164736f6c634300060c0033',
};

// prettier-ignore
export interface Doppelganger extends Contract<Doppelganger> {
  // Shortcut functions.
  __doppelganger__mockReturns: Send<(data: ethers.utils.BytesLike, value: ethers.utils.BytesLike) => void>;
  __doppelganger__mockReverts: Send<(data: ethers.utils.BytesLike, reason: string) => void>;
  
  // Full function signature.
  '__doppelganger__mockReturns(bytes,bytes)': Send<(data: ethers.utils.BytesLike, value: ethers.utils.BytesLike) => void>;
  '__doppelganger__mockReverts(bytes,string)': Send<(data: ethers.utils.BytesLike, reason: string) => void>;
}

const bytecode = DoppelgangerCompilerOutput.bytecode;
const abi = DoppelgangerCompilerOutput.abi;

export class Doppelganger extends Contract<Doppelganger> {
  public static deploy(signer: ethers.Signer): Promise<Doppelganger> {
    const contract = new Doppelganger(abi, '0x', signer);
    return deploy(contract, bytecode) as any;
  }
}
