import { ethers } from 'ethers';
import { Contract, deploy } from './contract';
import { Send } from './types';

export const DoppelgangerCompilerOutput = {
  abi: [
    {
      inputs: [
        {
          internalType: 'bytes4[]',
          name: '_sighashes',
          type: 'bytes4[]',
        },
        {
          internalType: 'string[]',
          name: '_signatures',
          type: 'string[]',
        },
      ],
      stateMutability: 'nonpayable',
      type: 'constructor',
    },
    {
      stateMutability: 'payable',
      type: 'fallback',
    },
    {
      inputs: [
        {
          internalType: 'bytes',
          name: '_data',
          type: 'bytes',
        },
        {
          internalType: 'bytes',
          name: '_value',
          type: 'bytes',
        },
      ],
      name: '__doppelganger__mockReturns',
      outputs: [],
      stateMutability: 'nonpayable',
      type: 'function',
    },
    {
      inputs: [
        {
          internalType: 'bytes',
          name: '_data',
          type: 'bytes',
        },
        {
          internalType: 'string',
          name: '_reason',
          type: 'string',
        },
      ],
      name: '__doppelganger__mockReverts',
      outputs: [],
      stateMutability: 'nonpayable',
      type: 'function',
    },
  ],
  bytecode:
    '60806040523480156200001157600080fd5b50604051620014c4380380620014c48339818101604052810190620000379190620003a4565b80518251146200007e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000759062000459565b60405180910390fd5b60008090505b82518110156200016f576040518060400160405280600115158152602001838381518110620000af57fe5b602002602001015181525060016000858481518110620000cb57fe5b60200260200101517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160010190805190602001906200015d92919062000178565b50905050808060010191505062000084565b505050620005b5565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001bb57805160ff1916838001178555620001ec565b82800160010185558215620001ec579182015b82811115620001eb578251825591602001919060010190620001ce565b5b509050620001fb9190620001ff565b5090565b6200022491905b808211156200022057600081600090555060010162000206565b5090565b90565b600082601f8301126200023957600080fd5b8151620002506200024a82620004a9565b6200047b565b915081818352602084019350602081019050838560208402820111156200027657600080fd5b60005b83811015620002aa57816200028f888262000331565b84526020840193506020830192505060018101905062000279565b5050505092915050565b600082601f830112620002c657600080fd5b8151620002dd620002d782620004d2565b6200047b565b9150818183526020840193506020810190508360005b838110156200032757815186016200030c888262000348565b845260208401935060208301925050600181019050620002f3565b5050505092915050565b60008151905062000342816200059b565b92915050565b600082601f8301126200035a57600080fd5b8151620003716200036b82620004fb565b6200047b565b915080825260208301602083018583830111156200038e57600080fd5b6200039b83828462000565565b50505092915050565b60008060408385031215620003b857600080fd5b600083015167ffffffffffffffff811115620003d357600080fd5b620003e18582860162000227565b925050602083015167ffffffffffffffff811115620003ff57600080fd5b6200040d85828601620002b4565b9150509250929050565b600062000426601a8362000528565b91507f5369676e617475726573206c656e677468206d69736d617463680000000000006000830152602082019050919050565b60006020820190508181036000830152620004748162000417565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156200049f57600080fd5b8060405250919050565b600067ffffffffffffffff821115620004c157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115620004ea57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156200051357600080fd5b601f19601f8301169050602081019050919050565b600082825260208201905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60005b838110156200058557808201518184015260208101905062000568565b8381111562000595576000848401525b50505050565b620005a68162000539565b8114620005b257600080fd5b50565b610eff80620005c56000396000f3fe60806040526004361061002d5760003560e01c80630ad4c242146100c15780638863f50a146100ea5761002e565b5b61003661087c565b61003e610113565b9050600115158160400151151514156100b15780606001516040516020016100669190610d25565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100a89190610d47565b60405180910390fd5b6100be81602001516106d4565b50005b3480156100cd57600080fd5b506100e860048036038101906100e39190610a91565b6106dc565b005b3480156100f657600080fd5b50610111600480360381019061010c9190610afd565b6107ac565b005b61011b61087c565b600080803660405161012e929190610cea565b604051809103902081526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff16151515158152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102035780601f106101d857610100808354040283529160200191610203565b820191906000526020600020905b8154815290600101906020018083116101e657829003601f168201915b505050505081526020016002820160009054906101000a900460ff16151515158152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102c05780601f10610295576101008083540402835291602001916102c0565b820191906000526020600020905b8154815290600101906020018083116102a357829003601f168201915b5050505050815250509050600115158160000151151514156102e4578090506106d1565b60008080357fffffffff000000000000000000000000000000000000000000000000000000001660405160200161031b9190610ccf565b6040516020818303038152906040528051906020012081526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff16151515158152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103fe5780601f106103d3576101008083540402835291602001916103fe565b820191906000526020600020905b8154815290600101906020018083116103e157829003601f168201915b505050505081526020016002820160009054906101000a900460ff16151515158152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104bb5780601f10610490576101008083540402835291602001916104bb565b820191906000526020600020905b81548152906001019060200180831161049e57829003601f168201915b5050505050815250509050600115158160000151151514156104df578090506106d1565b6104e76108a8565b6001600080357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000206040518060400160405290816000820160009054906101000a900460ff16151515158152602001600182018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561061a5780601f106105ef5761010080835404028352916020019161061a565b820191906000526020600020905b8154815290600101906020018083116105fd57829003601f168201915b50505050508152505090506001151581600001511515141561069657806020015160405160200161064b9190610d03565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068d9190610d47565b60405180910390fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c890610d69565b60405180910390fd5b90565b805160208201f35b6040518060800160405280600115158152602001828152602001600015158152602001604051806020016040528060008152508152506000808480519060200120815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160010190805190602001906107679291906108c4565b5060408201518160020160006101000a81548160ff02191690831515021790555060608201518160030190805190602001906107a4929190610944565b509050505050565b6040518060800160405280600115158152602001604051806020016040528060008152508152602001600115158152602001828152506000808480519060200120815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160010190805190602001906108379291906108c4565b5060408201518160020160006101000a81548160ff0219169083151502179055506060820151816003019080519060200190610874929190610944565b509050505050565b604051806080016040528060001515815260200160608152602001600015158152602001606081525090565b6040518060400160405280600015158152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061090557805160ff1916838001178555610933565b82800160010185558215610933579182015b82811115610932578251825591602001919060010190610917565b5b50905061094091906109c4565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061098557805160ff19168380011785556109b3565b828001600101855582156109b3579182015b828111156109b2578251825591602001919060010190610997565b5b5090506109c091906109c4565b5090565b6109e691905b808211156109e25760008160009055506001016109ca565b5090565b90565b600082601f8301126109fa57600080fd5b8135610a0d610a0882610db6565b610d89565b91508082526020830160208301858383011115610a2957600080fd5b610a34838284610e6c565b50505092915050565b600082601f830112610a4e57600080fd5b8135610a61610a5c82610de2565b610d89565b91508082526020830160208301858383011115610a7d57600080fd5b610a88838284610e6c565b50505092915050565b60008060408385031215610aa457600080fd5b600083013567ffffffffffffffff811115610abe57600080fd5b610aca858286016109e9565b925050602083013567ffffffffffffffff811115610ae757600080fd5b610af3858286016109e9565b9150509250929050565b60008060408385031215610b1057600080fd5b600083013567ffffffffffffffff811115610b2a57600080fd5b610b36858286016109e9565b925050602083013567ffffffffffffffff811115610b5357600080fd5b610b5f85828601610a3d565b9150509250929050565b610b7a610b7582610e40565b610eae565b82525050565b6000610b8c8385610e19565b9350610b99838584610e6c565b82840190509392505050565b6000610bb082610e0e565b610bba8185610e24565b9350610bca818560208601610e7b565b610bd381610eb8565b840191505092915050565b6000610be982610e0e565b610bf38185610e35565b9350610c03818560208601610e7b565b80840191505092915050565b6000610c1c601683610e35565b91507f4d6f636b206e6f7420696e697469616c697a65643a20000000000000000000006000830152601682019050919050565b6000610c5c601483610e24565b91507f4d6f636b206e6f7420696e697469616c697a65640000000000000000000000006000830152602082019050919050565b6000610c9c600d83610e35565b91507f4d6f636b207265766572743a20000000000000000000000000000000000000006000830152600d82019050919050565b6000610cdb8284610b69565b60048201915081905092915050565b6000610cf7828486610b80565b91508190509392505050565b6000610d0e82610c0f565b9150610d1a8284610bde565b915081905092915050565b6000610d3082610c8f565b9150610d3c8284610bde565b915081905092915050565b60006020820190508181036000830152610d618184610ba5565b905092915050565b60006020820190508181036000830152610d8281610c4f565b9050919050565b6000604051905081810181811067ffffffffffffffff82111715610dac57600080fd5b8060405250919050565b600067ffffffffffffffff821115610dcd57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115610df957600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b82818337600083830152505050565b60005b83811015610e99578082015181840152602081019050610e7e565b83811115610ea8576000848401525b50505050565b6000819050919050565b6000601f19601f830116905091905056fea26469706673582212201dfd3c6007eda388176c9bd5fb632d086dafaf188c1663f7d50f57bddc14b7cc64736f6c63430006080033',
};

export type DoppelgangerArgs = [_sighashes: ethers.utils.BytesLike[], _signatures: string[]];

// prettier-ignore
export interface Doppelganger extends Contract<Doppelganger> {
  // Shortcut functions.
  __doppelganger__mockReturns: Send<(data: ethers.utils.BytesLike, value: ethers.utils.BytesLike) => void, Doppelganger>;
  __doppelganger__mockReverts: Send<(data: ethers.utils.BytesLike, reason: string) => void, Doppelganger>;
  
  // Full function signature.
  '__doppelganger__mockReturns(bytes,bytes)': Send<(data: ethers.utils.BytesLike, value: ethers.utils.BytesLike) => void, Doppelganger>;
  '__doppelganger__mockReverts(bytes,string)': Send<(data: ethers.utils.BytesLike, reason: string) => void, Doppelganger>;
}

const bytecode = DoppelgangerCompilerOutput.bytecode;
const abi = DoppelgangerCompilerOutput.abi;

export class Doppelganger extends Contract<Doppelganger> {
  public static async deploy(signer: ethers.Signer, ...args: DoppelgangerArgs): Promise<Doppelganger> {
    const address = ethers.constants.AddressZero;
    const contract = new Doppelganger(abi, address, signer);
    const receipt = await deploy(contract, bytecode ?? '0x', ...args);
    return contract.attach(receipt.contractAddress);
  }
}
